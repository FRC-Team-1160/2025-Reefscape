package frc.robot;

import java.util.function.Supplier;

import org.littletonrobotics.junction.Logger;

import com.pathplanner.lib.path.PathConstraints;
import com.pathplanner.lib.path.PathPlannerPath;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import frc.robot.Constants.PathConstants;

public class PathplannerController {

    public static final PathplannerController instance = new PathplannerController();
    
    public ChassisSpeeds generated_speeds;

    public double[] feedforwards;

    public Command current_command;

    public PathConstraints PATH_CONSTRAINTS;

    /** Creates a new PathplannerController. */
    private PathplannerController() {

        generated_speeds = new ChassisSpeeds();
        current_command = new Command() {};
        feedforwards = new double[4];

        PATH_CONSTRAINTS = new PathConstraints(
            PathConstants.MAX_SPEED, 
            PathConstants.MAX_ACCEL, 
            PathConstants.MAX_ANG_SPEED, 
            PathConstants.MAX_ANG_ACCEL);
    }

    /**
     * Stores the speeds generated by a Pathplanner command.
     * @param speeds The robot-relative chassis speeds.
     */
    public void acceptGeneratedSpeeds(ChassisSpeeds speeds, double[] feedforwards) {
        generated_speeds = speeds;
        this.feedforwards = feedforwards;
        Logger.recordOutput("PathplannerController/Feedforwards", feedforwards);
    }

    /**
     * Wraps the initialize() method for the stored command.
     */
    public void cmdInitialize() {
        current_command.initialize();
    }

    /**
     * Wraps the execute() method for the stored command.
     */
    public void cmdExecute() {
        current_command.execute();
    }

    /**
     * Wraps the end() method for the stored command.
     * @param interrupted Whether the command was interrupted by isFinished().
     */
    public void cmdEnd(boolean interrupted) {
        current_command.end(interrupted);
    }

    /*
     * Wraps the isFinished() method for the stored command.
     */
    public boolean cmdIsFinished() {
        return current_command.isFinished();
    }
}
